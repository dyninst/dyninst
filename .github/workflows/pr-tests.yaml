name: Pull Request Tests

on:
  pull_request:
     branches:
        - master
     paths:
       - '**.h'
       - '**.C'
       - '**.c'
     types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

jobs:

  get-oses:
    runs-on: ubuntu-latest
    outputs:
      all: ${{ steps.all.outputs.all }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: all
        uses: ./.github/actions/os-versions

  get-compilers:
    runs-on: ubuntu-latest
    outputs:
      all: ${{ steps.compilers.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - id: compilers
        shell: bash
        run: |
          set -ex
          script="./.github/scripts/compiler_configs.py"
          names=$(python3 ${script} --print-names)
          echo "value=${names}" >> $GITHUB_OUTPUT


  pr-tests:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs: [get-oses, get-compilers]
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJson(needs.get-oses.outputs.all) }}
        compiler: ${{ fromJson(needs.get-compilers.outputs.all) }}
    permissions:
      packages: read
    container:
      image: ghcr.io/dyninst/amd64/${{ matrix.os }}:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
    name: PR tests ( ${{ matrix.os }}, ${{ matrix.compiler }})
    steps:
      - name: Checkout Dyninst
        uses: actions/checkout@v4
        with:
          path: "src"  # relative to ${GITHUB_WORKSPACE}

      - name: Build Dyninst
        uses: ./src/.github/actions/build
        with:
          os: ${{ matrix.os }}
          compiler: ${{ matrix.compiler }}
          src-dir: "${GITHUB_WORKSPACE}/src"
          install-dir: "${GITHUB_WORKSPACE}/install"

      - name: Checkout Test Suite
        if: ${{ matrix.compiler != 'clang' }}
        uses: actions/checkout@v4
        with:
          repository: dyninst/testsuite
          path: "testsuite"  # relative to ${GITHUB_WORKSPACE}

      - name: Build testsuite
        if: ${{ matrix.compiler != 'clang' }}
        shell: bash
        run: |
          set -ex
          cd ${GITHUB_WORKSPACE}/testsuite; mkdir build; cd build
          cmake .. -DDyninst_ROOT=${GITHUB_WORKSPACE}/install
          cmake --build . --parallel 2

      - name: Checkout Examples
        uses: actions/checkout@v4
        with:
          repository: dyninst/examples
          path: "examples"  # relative to ${GITHUB_WORKSPACE}

      - name: Build examples
        shell: bash
        run: |
          set -ex
          cd ${GITHUB_WORKSPACE}/examples; mkdir build; cd build
          cmake .. -DDyninst_ROOT=${GITHUB_WORKSPACE}/install
          cmake --build . --parallel 2

      - name: Checkout External Tests
        uses: actions/checkout@v4
        with:
          repository: dyninst/external-tests
          path: "external-tests"  # relative to ${GITHUB_WORKSPACE}

      - name: Build external tests
        shell: bash
        run: |
          set -ex
          cd ${GITHUB_WORKSPACE}/external-tests; mkdir build; cd build
          cmake .. -DDyninst_ROOT=${GITHUB_WORKSPACE}/install
          cmake --build . --parallel 2

      - name: Run external tests
        if: ${{ matrix.compiler != 'clang' }}  # libdyninstAPI_RT doesn't work correctly with clang
        shell: bash
        run: |
          set -ex
          export DYNINSTAPI_RT_LIB=$(find ${GITHUB_WORKSPACE}/install/ -name libdyninstAPI_RT.so)
          cd ${GITHUB_WORKSPACE}/external-tests/build
          ctest -VV --output-on-failure .
