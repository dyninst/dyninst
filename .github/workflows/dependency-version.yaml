# Ensure the minimum dependency versions found in the various CMake
# files match the expected values. This ensures we synchronize versions
# across containers and workflows.  

name: Check dependency versions

on:
  pull_request:
    branches: [ master ]
    paths:
       - '**.cmake'
       - '**CMakeLists.txt'
       - 'docker/dependencies.versions'

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Version check
        run: |
          res=0
          current=$(awk 'match($0,/set\(_boost_min_version (.+)\)/,a){print a[1]}' cmake/Boost.cmake)
          expected=$(awk 'match($0,/boost:(.+)/,a){print a[1]}' docker/dependencies.versions)
          if test "$current" != "$expected"; then
            echo "Boost mismatch: Found $current, expected $expected" >/dev/stderr
            res=1
          fi
          
          current=$(awk 'match($0,/set\(_tbb_min_version (.+)\)/,a){print a[1]}' cmake/ThreadingBuildingBlocks.cmake)
          expected=$(awk 'match($0,/tbb:(.+)/,a){print a[1]}' docker/dependencies.versions)
          IFS=' ' read -a versions <<< $(echo $current)
          if test "${versions[0]}" != "$expected" -a "${versions[1]}" != "$expected"; then
            echo "TBB mismatch: Found ('${versions[0]}','${versions[1]}'), expected $expected" >/dev/stderr
            res=1
          fi
          
          current=$(awk 'match($0,/set\(_min_version (.+)\)/,a){print a[1]}' cmake/ElfUtils.cmake)
          expected=$(awk 'match($0,/elfutils:(.+)/,a){print a[1]}' docker/dependencies.versions)
          if test "$current" != "$expected"; then
            echo "Elfutils mismatch: Found $current, expected $expected" >/dev/stderr
            res=1
          fi
          exit $res
