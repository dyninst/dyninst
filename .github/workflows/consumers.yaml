name: Build Consumers

on:
  schedule:
    - cron: '0 3 * * 1' # Monday at 3AM
  workflow_dispatch:

jobs:

  get-oses:
    runs-on: ubuntu-latest
    outputs:
      latest: ${{ steps.all.outputs.latest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: all
        uses: ./.github/actions/os-versions

  get-compilers:
    runs-on: ubuntu-latest
    outputs:
      all: ${{ steps.compilers.outputs.value }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - id: compilers
        shell: bash
        run: |
          set -ex
          script="./.github/scripts/compiler_configs.py"
          names=$(python3 ${script} --print-names)
          echo "value=${names}" >> $GITHUB_OUTPUT


  hpctoolkit:
    runs-on: ubuntu-latest
    needs: [get-oses, get-compilers]
    strategy:
      fail-fast: false
      matrix:
         os: ${{ fromJson(needs.get-oses.outputs.latest) }}
         compiler: ${{ fromJson(needs.get-compilers.outputs.all) }}
    permissions:
      packages: read
    container:
      image: ghcr.io/hainest/amd64/${{ matrix.os }}:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
    name: HPCToolkit (${{ matrix.os }}, ${{ matrix.compiler }})
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: "src"  # relative to $GITHUB_WORKSPACE

      - name: Install dependencies (Ubuntu)
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        shell: bash
        run: |
          set -ex
          apt update -qq
          apt install -y -qq gfortran m4 autoconf python3 python3-venv unzip meson ninja-build pkgconf \
                             libxerces-c-dev libyaml-cpp-dev libpfm4-dev libunwind-dev libxxhash-dev \
                             libboost-chrono-dev libboost-graph-dev libboost-regex-dev

      - name: Install dependencies (Fedora)
        if: ${{ startsWith(matrix.os, 'fedora') }}
        shell: bash
        run: |
          set -ex
          yum install -y gcc-gfortran m4 autoconf python3 unzip meson ninja-build pkgconf xerces-c-devel \
                         yaml-cpp-devel libunwind-devel xxhash-devel boost-chrono boost-graph boost-regex xz \
                         lbzip2

      - name: Install spack
        shell: bash
        run: |
          set -ex
          git clone --depth=1 --branch=develop https://github.com/spack/spack
          spack/bin/spack compiler find

      - name: Install spack externals
        shell: bash
        run: |
          set -ex
          spack/bin/spack external find --not-buildable cmake git m4 gmake meson ninja pkgconf curl python

      - name: Install spack externals (Ubuntu)
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        shell: bash
        run: |
          set -ex
          add="${GITHUB_WORKSPACE}/src/.github/scripts/add_spack_package.py"
          python3 ${add} $HOME/.spack --lib intel-tbb --version 2021.11.0 --location /usr
          python3 ${add} $HOME/.spack --lib elfutils --version 0.191 --location /usr
          python3 ${add} $HOME/.spack --lib dyninst --version master --location /dyninst/install
          python3 ${add} $HOME/.spack --lib boost --version 1.83.0 --location /usr
          python3 ${add} $HOME/.spack --lib xerces-c --version 3.2.4 --location /usr
          python3 ${add} $HOME/.spack --lib yaml-cpp --version 0.8.0 --location /usr
          python3 ${add} $HOME/.spack --lib libpfm4 --version 4.13.0 --location /usr
          python3 ${add} $HOME/.spack --lib libunwind --version 1.6.2 --location /usr
          python3 ${add} $HOME/.spack --lib xxhash --version 0.8.2 --location /usr

      - name: Install spack externals (Fedora)
        if: ${{ startsWith(matrix.os, 'fedora') }}
        shell: bash
        run: |
          set -ex
          add="${GITHUB_WORKSPACE}/src/.github/scripts/add_spack_package.py"
          python3 ${add} $HOME/.spack --lib intel-tbb --version 2020.3 --location /usr
          python3 ${add} $HOME/.spack --lib elfutils --version 0.190 --location /usr
          python3 ${add} $HOME/.spack --lib dyninst --version master --location /dyninst/install
          python3 ${add} $HOME/.spack --lib boost --version 1.81.0 --location /usr
          python3 ${add} $HOME/.spack --lib xerces-c --version 3.2.5 --location /usr
          python3 ${add} $HOME/.spack --lib yaml-cpp --version 0.7.0 --location /usr
          python3 ${add} $HOME/.spack --lib libunwind --version 1.7.0 --location /usr
          python3 ${add} $HOME/.spack --lib xxhash --version 0.8.2 --location /usr

      - name: Build
        shell: bash
        run: |
          set -ex
          spack/bin/spack install -j2 hpctoolkit@develop~viewer~papi ^intel-tbb ^dyninst@master %${{ matrix.compiler }}


  must:
    runs-on: ubuntu-latest
    needs: get-oses
    strategy:
      fail-fast: false
      matrix:
         os: ${{ fromJson(needs.get-oses.outputs.latest) }}
    permissions:
      packages: read
    container:
      image: ghcr.io/hainest/amd64/${{ matrix.os }}:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
    name: must ${{ matrix.os }}
    steps:
      - name: Install dependencies (Ubuntu)
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        shell: bash
        run: |
          set -ex
          apt update -qq
          apt install -y -qq openmpi-bin libopenmpi-dev gfortran libxml2-dev wget python3
          
      - name: Install dependencies (Fedora)
        if: ${{ startsWith(matrix.os, 'fedora') }}
        shell: bash
        run: |
          set -ex
          yum install -y openmpi openmpi-devel gcc-gfortran libxml2-devel wget python3

      - name: Build
        shell: bash
        run: |
          set -ex
          
          version="1.9.2"
          mkdir must; cd must  # can't build in / because must does unusual checks
          wget https://hpc.rwth-aachen.de/must/files/MUST-v${version}.tar.gz
          tar -zxf MUST-v${version}.tar.gz --strip-components=1
          
          if [[ "${{ matrix.os }}" =~ "fedora" ]]; then
            source /etc/profile.d/modules.sh
            module load mpi
          fi
          
          if [[ ! -d /dyninst/install/lib ]]; then
            ln -s /dyninst/install/lib* /dyninst/install/lib
          fi
          
          opts+="-DENABLE_TSAN=OFF "
          opts+="-DUSE_BACKWARD=OFF "
          opts+="-DUSE_CALLPATH=ON "
          opts+="-DSTACKWALKER_INSTALL_PREFIX=/dyninst/install "
          opts+="-DCMAKE_BUILD_TYPE=RelWithDebInfo "
          
          cmake . -B build ${opts}
          cmake --build build --parallel 2


  systemtap:
    runs-on: ubuntu-latest
    needs: get-oses
    strategy:
      fail-fast: false
      matrix:
         os: ${{ fromJson(needs.get-oses.outputs.latest) }}
    permissions:
      packages: read
    container:
      image: ghcr.io/hainest/amd64/${{ matrix.os }}:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
    name: systemtap ${{ matrix.os }}
    steps:
      - name: Install dependencies
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        shell: bash
        run: |
          set -ex
          apt -qq update
          apt -qq install -y git python3 libjson-c-dev m4 autoconf gettext

      - name: Install dependencies          
        if: ${{ startsWith(matrix.os, 'fedora') }}
        shell: bash
        run: |
          set -ex
          yum install -y git python3 json-c-devel m4 autoconf dh-autoreconf gettext which

      - name: Set up systemtap
        shell: bash
        run: |
          git clone --depth=1 https://sourceware.org/git/systemtap.git
          ln -s /dyninst/install/include /usr/include/dyninst
          ln -s /dyninst/install/lib* /usr/lib64/dyninst

      - name: Build systemtap
        shell: bash
        run: |
          set -ex
          cd systemtap
          autoreconf
          mkdir build
          cd build
          ../configure --with-dyninst --without-python3-probes
          make -j2


  llnl-stat:
    runs-on: ubuntu-latest
    needs: get-oses
    strategy:
      fail-fast: false
      matrix:
         os: ${{ fromJson(needs.get-oses.outputs.latest) }}
    permissions:
      packages: read
    container:
      image: ghcr.io/hainest/amd64/${{ matrix.os }}:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
    name: STAT ${{ matrix.os }}
    steps:
      - name: Install dependencies
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        shell: bash
        run: |
          set -ex
          apt update -qq
          apt install -y git bison flex python3 build-essential dh-autoreconf wget libgcrypt20-dev \
                         libboost-program-options-dev libboost-regex-dev libboost-wave-dev python3-dev \
                         python3-setuptools

      - name: Install dependencies
        if: ${{ startsWith(matrix.os, 'fedora') }}
        shell: bash
        run: |
          set -ex
          yum install -y git bison flex python3 dh-autoreconf wget libgcrypt-devel \
                         boost-program-options boost-regex boost-wave python3-devel \
                         python3-setuptools libtool-ltdl-devel which

      - name: Install GraphLib
        shell: bash
        run: |
          set -ex
          git clone --depth=1 https://github.com/LLNL/graphlib
          cd graphlib
          mkdir build
          cd build
          cmake ..
          cmake --build . --parallel 2
          cmake --install .  # /usr

      - name: Install GraphViz
        shell: bash
        run: |
          set -ex
          cd /
          git clone --depth=1 https://gitlab.com/graphviz/graphviz.git
          cd graphviz
          ./autogen.sh
          mkdir build
          cd build
          ../configure --without-qt --without-gts --without-doc --without-expat --without-ghostscript \
                       --without-gtkplus --without-libgd --without-pangocairo --without-popler \
                       --without-quartz --without-x
          make -j2
          make install

      - name: Install launchmon
        shell: bash
        run: |
          set -ex
          cd /
          git clone --depth=1 https://github.com/llnl/launchmon.git
          cd launchmon
          ./bootstrap
          mkdir build
          cd build
          ../configure CXXFLAGS='--std=c++11'
          make -j2
          make install

      - name: Install MRNet
        shell: bash
        run: |
          set -ex
          cd /
          git clone --depth=1 https://github.com/dyninst/mrnet.git
          cd mrnet
          mkdir build
          cd build
          CC=gcc CXX=g++ ../configure --enable-shared
          make -j2
          make install

      - name: Install STAT
        shell: bash
        run: |
          set -ex
          cd /
          
          # STAT manually sets the lib subdir to 'lib'
          if [[ ! -d /dyninst/install/lib ]]; then
            ln -s /dyninst/install/lib* /dyninst/install/lib
          fi
          
          git clone --depth=1 https://github.com/llnl/stat.git
          cd stat
          ./bootstrap
          mkdir build
          cd build
          ../configure --disable-gui --disable-examples --with-stackwalker=/dyninst/install --with-mrnet=/usr/local
          make -j2


  tau:
    runs-on: ubuntu-latest
    needs: get-oses
    strategy:
      fail-fast: false
      matrix:
         os: ${{ fromJson(needs.get-oses.outputs.latest) }}
    permissions:
      packages: read
    container:
      image: ghcr.io/hainest/amd64/${{ matrix.os }}:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
    name: TAU ${{ matrix.os }}
    steps:
      - name: Install dependencies (Ubuntu)
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        shell: bash
        run: |
          set -ex
          # TAU assumes Dyninst needs libdwarf instead of libdw. This has no real
          # effect on Dyninst as we RPATH our deps. It just makes the manually-constructed
          # link line in the TAU build work.
          apt update
          apt install -y git libdwarf1
          ln -s /usr/lib/x86_64-linux-gnu/libdwarf.so.1.0.0 /usr/lib/x86_64-linux-gnu/libdwarf.so

      - name: Install dependencies (Fedora)
        if: ${{ startsWith(matrix.os, 'fedora') }}
        shell: bash
        run: |
          set -ex
          # TAU assumes Dyninst needs libdwarf instead of libdw. This has no real
          # effect on Dyninst as we RPATH our deps. It just makes the manually-constructed
          # link line in the TAU build work.
          yum install -y git libdwarf

      - name: Fetch TAU
        shell: bash
        run: |
          set -ex
          git clone --depth=1 https://github.com/UO-OACISS/tau2

      - name: Build TAU
        shell: bash
        run: |
          set -ex

          # TAU manually sets the lib subdir to 'lib'
          if [[ ! -d /dyninst/install/lib ]]; then
            ln -s /dyninst/install/lib* /dyninst/install/lib
          fi

          cd tau2
          ./configure -dyninst=/dyninst/install
          make -j2
