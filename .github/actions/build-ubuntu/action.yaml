name: Build Ubuntu single-config

inputs:
  extra-cmake-flags:
    required: false
  compiler:
    required: true
  compiler-version:
    required: false
  build-type:
    required: false
    default: "RELWITHDEBINFO"
  install-dir:
    required: false
    default: "/dyninst/install"
  src-dir:
    required: false
    default: "/dyninst/src"
  num-jobs:
    required: false
    default: 2
  extra-libs:
    required: false
  run-tests:
    default: "false"
    required: false

runs:
  using: "composite"
  steps:
    - name: Update
      shell: bash
      run: |
        set -ex
        apt update -qq

    - name: Compiler names
      id: compiler-name
      shell: bash
      run: |
        set -ex
        
        case "${{ inputs.compiler }}" in
          clang) cc=clang; cxx=clang++; ;;
            gcc) cc=gcc; cxx=g++; ;;
        esac
        if [[ ! -z "${{ inputs.compiler-version }}" ]]; then
          cc+="-${{ inputs.compiler-version }}"
          cxx+="-${{ inputs.compiler-version }}"
        fi
        echo "value={ \"c\" : \"${cc}\", \"cxx\" : \"${cxx}\" }" >> $GITHUB_OUTPUT


    # Clang requires that only a single libomp be present and it must match the version of clang.
    - name: Clean libomp install
      if: ${{ inputs.compiler == 'clang' && inputs.compiler-version != '' }}
      shell: bash
      run: |
        set -ex

        apt remove --purge -y "libomp*"
        apt install -qq -y libomp-${{ inputs.compiler-version }}-dev

    - name: Install C compiler (${{ inputs.compiler }})
      shell: bash
      run: |
        set -ex
        apt install -qq -y ${{ fromJson(steps.compiler-name.outputs.value).c }}

    # There is no apt package for clang++
    - name: Install C++ compiler
      if: ${{ inputs.compiler != 'clang' }}
      shell: bash
      run: |
        set -ex
        apt install -qq -y ${{ fromJson(steps.compiler-name.outputs.value).cxx }}

    - name: Install extra libs
      if: ${{ inputs.extra-libs != '' }}
      shell: bash
      run: |
        set -ex
        apt install -qq -y ${{ inputs.extra-libs }}

    - name: Build Dyninst (${{ inputs.build-type }})
      shell: bash
      run: |
        set -ex
        
        cmake_args="-DCMAKE_C_COMPILER=${{ fromJson(steps.compiler-name.outputs.value).c }} "
        cmake_args+="-DCMAKE_CXX_COMPILER=${{ fromJson(steps.compiler-name.outputs.value).cxx }} "
        cmake_args+="-DCMAKE_BUILD_TYPE=${{ inputs.build-type }} "
        cmake_args+="${{ inputs.extra-cmake-flags }} "

        src="${{ inputs.src-dir }}"
        dest="${{ inputs.install-dir }}"

        run_tests=
        if test "${{ inputs.run-tests }}" = "true"; then
          run_tests="-t"
        fi
        
        bash ${src}/docker/build.sh $src $dest ${run_tests} -v -j ${{ inputs.num-jobs }} -c "${cmake_args}"
