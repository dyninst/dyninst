.. _`sec:freebsdHeaders.h`:

freebsdHeaders.h
################

.. cpp:namespace:: freebsd

.. code:: c

  #define PDSOCKET_ERROR (-1)

.. cpp:type:: int PDSOCKET

.. cpp:function:: int P_getopt(int argc, char *argv[], const char *optstring)
.. cpp:function:: void P_abort (void)
.. cpp:function:: int P_close (int FILEDES)
.. cpp:function:: int P_dup2 (int OLD, int NEW)
.. cpp:function:: int P_execvp (const char *FILENAME, char *const ARGV[])
.. cpp:function:: int P_execve (const char* FILENAME, char* const ARGV[], char* const ENVP[])
.. cpp:function:: void P__exit (int STATUS)
.. cpp:function:: int P_fcntl (int FILEDES, int COMMAND, int ARG2)
.. cpp:function:: FILE * P_fdopen (int FILEDES, const char *OPENTYPE)
.. cpp:function:: FILE * P_fopen (const char *FILENAME, const char *OPENTYPE)
.. cpp:function:: int P_copy(const char *from, const char *to)
.. cpp:function:: int P_system(const char *string)
.. cpp:function:: int P_fstat (int FILEDES, struct stat *BUF)
.. cpp:function:: pid_t P_getpid ()
.. cpp:function:: int P_kill(pid_t PID, int SIGNUM)
.. cpp:function:: off_t P_lseek (int FILEDES, off_t OFFSET, int WHENCE)
.. cpp:function:: int P_open(const char *FILENAME, int FLAGS, mode_t MODE)
.. cpp:function:: int P_pclose (FILE *STREAM)
.. cpp:function:: FILE *P_popen (const char *COMMAND, const char *MODE)
.. cpp:function:: size_t P_read (int FILEDES, void *BUFFER, size_t SIZE)
.. cpp:function:: int P_uname(struct utsname *un)
.. cpp:function:: pid_t P_wait(int *status_ptr)
.. cpp:function:: int P_waitpid(pid_t pid, int *statusp, int options)
.. cpp:function:: size_t P_write (int FILEDES, const void *BUFFER, size_t SIZE)
.. cpp:function:: int P_chdir(const char *path)
.. cpp:function:: int P_putenv(char *str)
.. cpp:function:: int P_getpagesize()
.. cpp:function:: int P_shmget(key_t theKey, int size, int flags)
.. cpp:function:: void *P_shmat(int shmid, void *addr, int flags)
.. cpp:function:: int P_shmdt(void *addr)
.. cpp:function:: int P_shmctl(int shmid, int cmd, struct shmid_ds *buf)
.. cpp:function:: void P_exit (int STATUS)
.. cpp:function:: int P_fflush(FILE *stream)
.. cpp:function:: char * P_fgets (char *S, int COUNT, FILE *STREAM)
.. cpp:function:: void * P_malloc (size_t SIZE)
.. cpp:function:: void * P_memcpy (void *A1, const void *A2, size_t SIZE)
.. cpp:function:: void * P_memset (void *BLOCK, int C, size_t SIZE)
.. cpp:function:: void P_perror (const char *MESSAGE)
.. cpp:type:: void (*P_sig_handler)(int)
.. cpp:function:: P_sig_handler P_signal (int SIGNUM, P_sig_handler ACTION)
.. cpp:function:: char * P_strcat (char *TO, const char *FROM)
.. cpp:function:: const char * P_strchr (const char *P_STRING, int C)
.. cpp:function:: char * P_strchr (char *P_STRING, int C)
.. cpp:function:: int P_strcmp (const char *S1, const char *S2)
.. cpp:function:: char * P_strcpy (char *TO, const char *FROM)
.. cpp:function:: char *P_strdup(const char *S)
.. cpp:function:: size_t P_strlen (const char *S) 
.. cpp:function:: char * P_strncat (char *TO, const char *FROM, size_t SIZE)
.. cpp:function:: int P_strncmp (const char *S1, const char *S2, size_t SIZE)
.. cpp:function:: char * P_strncpy (char *TO, const char *FROM, size_t SIZE)
.. cpp:function:: const char * P_strrchr (const char *P_STRING, int C) 
.. cpp:function:: char * P_strrchr (char *P_STRING, int C) 
.. cpp:function:: const char * P_strstr (const char *HAYSTACK, const char *NEEDLE) 
.. cpp:function:: char * P_strstr (char *HAYSTACK, const char *NEEDLE) 
.. cpp:function:: double P_strtod (const char *P_STRING, char **TAILPTR) 
.. cpp:function:: char * P_strtok (char *NEWP_STRING, const char *DELIMITERS) 
.. cpp:function:: long int P_strtol (const char *P_STRING, char **TAILPTR, int BASE) 
.. cpp:function:: unsigned long int P_strtoul(const char *P_STRING, char **TAILPTR, int BASE) 
.. cpp:function:: int P_accept (int SOCK, struct sockaddr *ADDR, socklen_t *LENGTH_PTR) 
.. cpp:function:: int P_bind(int socket, struct sockaddr *addr, socklen_t len) 
.. cpp:function:: int P_connect(int socket, struct sockaddr *addr, socklen_t len) 
.. cpp:function:: struct hostent * P_gethostbyname (const char *NAME) 
.. cpp:function:: struct servent * P_getservbyname (const char *NAME, const char *PROTO) 
.. cpp:function:: int P_getsockname (int SOCKET, struct sockaddr *ADDR, socklen_t *LENGTH_PTR) 
.. cpp:function:: int P_getsockopt(int s, int level, int optname, void *optval, int *optlen) 
.. cpp:function:: int P_setsockopt(int s, int level, int optname, void *optval, int optlen) 
.. cpp:function:: int P_listen (int socket, unsigned int n) 
.. cpp:function:: caddr_t P_mmap(caddr_t addr, size_t len, int prot, int flags, int fd, off_t off) 
.. cpp:function:: int P_munmap(caddr_t addr, int i) 
.. cpp:function:: int P_socket (int NAMESPACE, int STYLE, int PROTOCOL) 
.. cpp:function:: int P_socketpair(int namesp, int style, int protocol, int filedes[2]) 
.. cpp:function:: int P_pipe(int fds[2]) 
.. cpp:function:: int P_strcasecmp(const char *s1, const char *s2) 
.. cpp:function:: int P_strncasecmp (const char *S1, const char *S2, size_t N) 
.. cpp:function:: void P_endservent(void) 
.. cpp:function:: ssize_t P_recv(int s, void *buf, int len, int flags) 
.. cpp:function:: long int P_ptrace(int req, pid_t pid, Address addr, Address data, int = -1) 
.. cpp:function:: int P_select(int wid, fd_set *rd, fd_set *wr, fd_set *ex, struct timeval *tm) 
.. cpp:function:: int P_mkdir(const char *pathname, mode_t mode) 
.. cpp:function:: int P_unlink(const char *pathname) 
