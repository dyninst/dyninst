include_guard(GLOBAL)

add_executable(type_query_x86 x86.cpp)
target_compile_options(type_query_x86 PRIVATE ${SUPPORTED_CXX_WARNING_FLAGS})
target_include_directories(type_query_x86 PRIVATE ${UNIT_TESTS_INCLUDES})
target_link_libraries(type_query_x86 PRIVATE common)
add_test(NAME machregister_type_query_x86 COMMAND type_query_x86)
set_tests_properties(machregister_type_query_x86 PROPERTIES LABELS "unit")

add_executable(type_query_x86_64 x86_64.cpp)
target_compile_options(type_query_x86_64 PRIVATE ${SUPPORTED_CXX_WARNING_FLAGS})
target_include_directories(type_query_x86_64 PRIVATE ${UNIT_TESTS_INCLUDES})
target_link_libraries(type_query_x86_64 PRIVATE common)
add_test(NAME machregister_type_query_x86_64 COMMAND type_query_x86_64)
set_tests_properties(machregister_type_query_x86_64 PROPERTIES LABELS "unit")

add_executable(type_query_aarch64 aarch64.cpp)
target_compile_options(type_query_aarch64 PRIVATE ${SUPPORTED_CXX_WARNING_FLAGS})
target_include_directories(type_query_aarch64 PRIVATE ${UNIT_TESTS_INCLUDES})
target_link_libraries(type_query_aarch64 PRIVATE common)
add_test(NAME machregister_type_query_aarch64 COMMAND type_query_aarch64)
set_tests_properties(machregister_type_query_aarch64 PROPERTIES LABELS "unit")

add_executable(type_query_ppc32 ppc32.cpp)
target_compile_options(type_query_ppc32 PRIVATE ${SUPPORTED_CXX_WARNING_FLAGS})
target_include_directories(type_query_ppc32 PRIVATE ${UNIT_TESTS_INCLUDES})
target_link_libraries(type_query_ppc32 PRIVATE common)
add_test(NAME machregister_type_query_ppc32 COMMAND type_query_ppc32)
set_tests_properties(machregister_type_query_ppc32 PROPERTIES LABELS "unit")

add_executable(type_query_ppc64 ppc64.cpp)
target_compile_options(type_query_ppc64 PRIVATE ${SUPPORTED_CXX_WARNING_FLAGS})
target_include_directories(type_query_ppc64 PRIVATE ${UNIT_TESTS_INCLUDES})
target_link_libraries(type_query_ppc64 PRIVATE common)
add_test(NAME machregister_type_query_ppc64 COMMAND type_query_ppc64)
set_tests_properties(machregister_type_query_ppc64 PROPERTIES LABELS "unit")

add_executable(type_query_amdgpu_gfx908 amdgpu_gfx908.cpp)
target_compile_options(type_query_amdgpu_gfx908 PRIVATE ${SUPPORTED_CXX_WARNING_FLAGS})
target_include_directories(type_query_amdgpu_gfx908 PRIVATE ${UNIT_TESTS_INCLUDES})
target_link_libraries(type_query_amdgpu_gfx908 PRIVATE common)
add_test(NAME machregister_type_query_amdgpu_gfx908 COMMAND type_query_amdgpu_gfx908)
set_tests_properties(machregister_type_query_amdgpu_gfx908 PROPERTIES LABELS "unit")

add_executable(type_query_amdgpu_gfx90a amdgpu_gfx90a.cpp)
target_compile_options(type_query_amdgpu_gfx90a PRIVATE ${SUPPORTED_CXX_WARNING_FLAGS})
target_include_directories(type_query_amdgpu_gfx90a PRIVATE ${UNIT_TESTS_INCLUDES})
target_link_libraries(type_query_amdgpu_gfx90a PRIVATE common)
add_test(NAME machregister_type_query_amdgpu_gfx90a COMMAND type_query_amdgpu_gfx90a)
set_tests_properties(machregister_type_query_amdgpu_gfx90a PROPERTIES LABELS "unit")

add_executable(type_query_amdgpu_gfx940 amdgpu_gfx940.cpp)
target_compile_options(type_query_amdgpu_gfx940 PRIVATE ${SUPPORTED_CXX_WARNING_FLAGS})
target_include_directories(type_query_amdgpu_gfx940 PRIVATE ${UNIT_TESTS_INCLUDES})
target_link_libraries(type_query_amdgpu_gfx940 PRIVATE common)
add_test(NAME machregister_type_query_amdgpu_gfx940 COMMAND type_query_amdgpu_gfx940)
set_tests_properties(machregister_type_query_amdgpu_gfx940 PROPERTIES LABELS "unit")
